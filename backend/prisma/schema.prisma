// ───────────────────────────────────────────────────────────────
// CONFIGURACIÓN GENERAL
// ───────────────────────────────────────────────────────────────

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ───────────────────────────────────────────────────────────────
// ENUMS PARA ESTADOS Y TIPOS (Mejora de integridad de datos)
// ───────────────────────────────────────────────────────────────

enum EstadoHabitacion {
  Disponible
  Ocupada
  Mantenimiento
}

enum EstadoReserva {
  Pendiente
  Confirmada
  CheckIn
  CheckOut
  Cancelada
}

enum EstadoFactura {
  Emitida
  Pagada
  Anulada
}

enum EstadoConsulta {
  Pendiente
  Respondida
}

enum TipoEventoHabitacion {
  Apertura
  Cierre
  Mantenimiento
}


// ───────────────────────────────────────────────────────────────
// USUARIOS Y ROLES (Ajustado para Supabase Auth y tu BD en Neon)
// ───────────────────────────────────────────────────────────────

model Usuario {
  // AJUSTE: id es String (UUID) para coincidir con Supabase Auth.
  // Es la clave primaria en tu BD de Neon pero no tiene una restricción de clave foránea a Supabase.
  id        String   @id
  nombre    String
  apellido  String?
  telefono  String?
  direccion String?
  provincia String?
  estado    Boolean  @default(true)
  fechaAlta DateTime @default(now())
  rolId     Int
  rol       Rol      @relation(fields: [rolId], references: [id])

  // Relaciones
  reservasCliente        Reserva[]          @relation("ReservasCliente")
  reservasAdministrador  Reserva[]          @relation("ReservasAdministrador")
  consultasRespondidas   Consulta[]
  eventosHabitacion      HabitacionEvento[]

  @@map("usuarios")
}

model Rol {
  id          Int       @id @default(autoincrement())
  nombre      String    @unique // "cliente" | "operador" | "administrador"
  descripcion String?
  usuarios    Usuario[]

  @@map("roles")
}

// ───────────────────────────────────────────────────────────────
// TIPO HABITACION Y SUS DETALLES
// ───────────────────────────────────────────────────────────────

model TipoHabitacion {
  id           Int                        @id @default(autoincrement())
  nombre       String
  descripcion  String?
  capacidad    Int
  // AJUSTE: Usar Decimal para precios.
  tarifaBase   Decimal
  superficie   Float?
  vista        String?
  politicas    String?
  habitaciones Habitacion[]
  amenidades   TipoHabitacionAmenidad[]
  imagenes     ImagenHabitacion[]

  @@map("tipos_habitacion")
}

model Amenidad {
  id              Int                        @id @default(autoincrement())
  nombre          String
  descripcion     String?
  icono           String?
  tiposHabitacion TipoHabitacionAmenidad[]

  @@map("amenidades")
}

model TipoHabitacionAmenidad {
  tipoHabitacionId Int
  amenidadId       Int
  tipoHabitacion   TipoHabitacion @relation(fields: [tipoHabitacionId], references: [id])
  amenidad         Amenidad       @relation(fields: [amenidadId], references: [id])

  @@id([tipoHabitacionId, amenidadId])
  @@map("tipos_habitacion_amenidades")
}

model ImagenHabitacion {
  id               Int            @id @default(autoincrement())
  tipoHabitacionId Int
  url              String
  descripcion      String?
  tipoHabitacion   TipoHabitacion @relation(fields: [tipoHabitacionId], references: [id])

  @@map("imagenes_habitacion")
}

// ───────────────────────────────────────────────────────────────
// HABITACIÓN (Instancia física de un TipoHabitacion)
// ───────────────────────────────────────────────────────────────

model Habitacion {
  id               Int                 @id @default(autoincrement())
  numero           String              @unique
  piso             Int
  // AJUSTE: Usar Enum para estandarizar los estados.
  estado           EstadoHabitacion
  tipoHabitacionId Int
  tipoHabitacion   TipoHabitacion      @relation(fields: [tipoHabitacionId], references: [id])
  reservas         ReservaHabitacion[]
  eventos          HabitacionEvento[]

  @@map("habitaciones")
}

// ───────────────────────────────────────────────────────────────
// RESERVA Y SUS DETALLES
// ───────────────────────────────────────────────────────────────

model Reserva {
  id              Int                 @id @default(autoincrement())
  // AJUSTE: clienteId y administradorId son String (UUID).
  clienteId       String
  administradorId String?
  fechaIngreso    DateTime
  fechaEgreso     DateTime
  adultos         Int
  ninios          Int               @default(0)
  // AJUSTE: Usar Enum para estandarizar los estados.
  estado          EstadoReserva
  // AJUSTE: Usar Decimal para precios.
  totalAlojamiento Decimal
  totalServicios   Decimal
  totalFinal       Decimal
  creadaEn         DateTime           @default(now())

  cliente         Usuario             @relation("ReservasCliente", fields: [clienteId], references: [id])
  administrador   Usuario?            @relation("ReservasAdministrador", fields: [administradorId], references: [id])
  habitaciones    ReservaHabitacion[]
  servicios       ReservaServicio[]
  factura         Factura?

  @@map("reservas")
}

model ReservaHabitacion {
  id            Int        @id @default(autoincrement())
  reservaId     Int
  habitacionId  Int
  // AJUSTE: Usar Decimal para precios.
  precioUnitario Decimal
  subtotal      Decimal
  observaciones String?
  reserva       Reserva    @relation(fields: [reservaId], references: [id])
  habitacion    Habitacion @relation(fields: [habitacionId], references: [id])

  @@unique([reservaId, habitacionId])
  @@map("reservas_habitacion")
}

model Servicio {
  id          Int               @id @default(autoincrement())
  nombre      String
  descripcion String?
  // AJUSTE: Usar Decimal para precios.
  precioBase  Decimal
  estado      Boolean           @default(true)
  reservas    ReservaServicio[]

  @@map("servicios")
}

model ReservaServicio {
  id             Int      @id @default(autoincrement())
  reservaId      Int
  servicioId     Int
  cantidad       Int
  // AJUSTE: Usar Decimal para precios.
  precioUnitario Decimal
  subtotal       Decimal
  fecha          DateTime @default(now())
  reserva        Reserva  @relation(fields: [reservaId], references: [id])
  servicio       Servicio @relation(fields: [servicioId], references: [id])

  @@map("reservas_servicios")
}


// ───────────────────────────────────────────────────────────────
// FACTURACIÓN Y PAGOS
// ───────────────────────────────────────────────────────────────

model Factura {
  id            Int          @id @default(autoincrement())
  reservaId     Int          @unique
  metodoPagoId  Int
  numeroFactura String       @unique
  fechaEmision  DateTime     @default(now())
  // AJUSTE: Usar Decimal para precios.
  subtotal      Decimal
  impuestos     Decimal
  total         Decimal
  // AJUSTE: Usar Enum para estandarizar los estados.
  estado        EstadoFactura
  reserva       Reserva      @relation(fields: [reservaId], references: [id])
  metodoPago    MetodoPago   @relation(fields: [metodoPagoId], references: [id])

  @@map("facturas")
}

model MetodoPago {
  id       Int       @id @default(autoincrement())
  nombre   String
  notas    String?
  facturas Factura[]

  @@map("metodos_pago")
}

// ───────────────────────────────────────────────────────────────
// CONSULTAS Y EVENTOS DE AUDITORÍA
// ───────────────────────────────────────────────────────────────

model Consulta {
  id            Int            @id @default(autoincrement())
  nombre        String
  email         String
  asunto        String
  mensaje       String
  // AJUSTE: Usar Enum para estandarizar los estados.
  estado        EstadoConsulta @default(Pendiente)
  creadaEn      DateTime       @default(now())
  respondidaEn  DateTime?
  respuesta     String?
  // AJUSTE: operadorId es String (UUID).
  operadorId    String?
  operador      Usuario?       @relation(fields: [operadorId], references: [id])

  @@map("consultas")
}

model HabitacionEvento {
  id           Int                 @id @default(autoincrement())
  habitacionId Int
  // AJUSTE: adminId es String (UUID).
  adminId      String
  // AJUSTE: Usar Enum para estandarizar los tipos.
  tipo         TipoEventoHabitacion
  detalle      String?
  fecha        DateTime            @default(now())
  habitacion   Habitacion          @relation(fields: [habitacionId], references: [id])
  administrador Usuario             @relation(fields: [adminId], references: [id])

  @@map("habitaciones_eventos")
}